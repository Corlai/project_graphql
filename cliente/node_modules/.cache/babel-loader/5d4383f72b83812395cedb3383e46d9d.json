{"ast":null,"code":"import _classCallCheck from \"/Users/jesuscordova/Desktop/curso-Graphql-Udemy/graphql-servidor/cliente/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jesuscordova/Desktop/curso-Graphql-Udemy/graphql-servidor/cliente/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jesuscordova/Desktop/curso-Graphql-Udemy/graphql-servidor/cliente/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jesuscordova/Desktop/curso-Graphql-Udemy/graphql-servidor/cliente/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jesuscordova/Desktop/curso-Graphql-Udemy/graphql-servidor/cliente/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jesuscordova/Desktop/curso-Graphql-Udemy/graphql-servidor/cliente/src/App.js\";\nimport React, { Component } from 'react';\nimport { ApolloProvider } from 'react-apollo';\nimport ApolloClient from 'apollo-boost'; //Esto se puede crear como un componente o en otra carpeta\n\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'; //Importar componentes\n\nimport Header from './components/header';\nimport Clientes from './components/Clientes'; //Creamos el cliente de apollo\n\nvar client = new ApolloClient({\n  //url donde el cliente se conectara\n  uri: 'http://localhost:4000/graphql',\n  //en caso de que haya errores lo imprime en consola\n  onError: function onError(_ref) {\n    var networkErro = _ref.networkErro,\n        graphQlErrors = _ref.graphQlErrors;\n    console.log('graphQLErrors', graphQlErrors);\n    console.log('networkError', graphQlErrors);\n  }\n});\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return (//Aqui usamo apolloprovider le pasamos el cliente que hemos creado y dentro están nuestros componentes\n        React.createElement(ApolloProvider, {\n          client: client,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        }, React.createElement(Router, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        }, React.createElement(Header, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }, React.createElement(Clientes, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }))))\n      );\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/jesuscordova/Desktop/curso-Graphql-Udemy/graphql-servidor/cliente/src/App.js"],"names":["React","Component","ApolloProvider","ApolloClient","BrowserRouter","Router","Route","Switch","Header","Clientes","client","uri","onError","networkErro","graphQlErrors","console","log","App"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,YAAP,MAAyB,cAAzB,C,CACA;;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,KAAlC,EAAyCC,MAAzC,QAAuD,kBAAvD,C,CAEA;;AAEA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,QAAP,MAAqB,uBAArB,C,CAEA;;AACA,IAAMC,MAAM,GAAG,IAAIP,YAAJ,CAAiB;AAC/B;AACAQ,EAAAA,GAAG,EAAE,+BAF0B;AAG/B;AACAC,EAAAA,OAAO,EAAE,uBAAoC;AAAA,QAAjCC,WAAiC,QAAjCA,WAAiC;AAAA,QAApBC,aAAoB,QAApBA,aAAoB;AAC5CC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,aAA7B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,aAA5B;AACA;AAP8B,CAAjB,CAAf;;IAUMG,G;;;;;;;;;;;;;6BACI;AACR,aACC;AACA,4BAAC,cAAD;AAAgB,UAAA,MAAM,EAAEP,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEC,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACC,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADD,EAEC;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADD,CAFD,CAFD;AAFD;AAYA;;;;EAdgBT,S;;AAiBlB,eAAegB,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport { ApolloProvider } from 'react-apollo';\nimport ApolloClient from 'apollo-boost';\n//Esto se puede crear como un componente o en otra carpeta\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\n//Importar componentes\n\nimport Header from './components/header';\nimport Clientes from './components/Clientes';\n\n//Creamos el cliente de apollo\nconst client = new ApolloClient({\n\t//url donde el cliente se conectara\n\turi: 'http://localhost:4000/graphql',\n\t//en caso de que haya errores lo imprime en consola\n\tonError: ({ networkErro, graphQlErrors }) => {\n\t\tconsole.log('graphQLErrors', graphQlErrors);\n\t\tconsole.log('networkError', graphQlErrors);\n\t}\n});\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t//Aqui usamo apolloprovider le pasamos el cliente que hemos creado y dentro están nuestros componentes\n\t\t\t<ApolloProvider client={client}>\n\t\t\t\t{/* Todo tiene que estar dentro de Router para poder redirigir */}\n\t\t\t\t<Router>\n\t\t\t\t\t<Header />\n\t\t\t\t\t<div className=\"container\">\n\t\t\t\t\t\t<Clientes />\n\t\t\t\t\t</div>\n\t\t\t\t</Router>\n\t\t\t</ApolloProvider>\n\t\t);\n\t}\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}