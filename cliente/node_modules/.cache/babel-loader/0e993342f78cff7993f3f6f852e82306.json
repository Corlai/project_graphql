{"ast":null,"code":"import _classCallCheck from \"/Users/jesuscordova/Desktop/curso-Graphql-Udemy/graphql-servidor/cliente/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jesuscordova/Desktop/curso-Graphql-Udemy/graphql-servidor/cliente/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jesuscordova/Desktop/curso-Graphql-Udemy/graphql-servidor/cliente/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jesuscordova/Desktop/curso-Graphql-Udemy/graphql-servidor/cliente/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jesuscordova/Desktop/curso-Graphql-Udemy/graphql-servidor/cliente/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jesuscordova/Desktop/curso-Graphql-Udemy/graphql-servidor/cliente/src/App.js\";\nimport React, { Component } from 'react';\nimport { ApolloProvider } from 'react-apollo';\nimport ApolloClient from 'apollo-boost'; //Importar componentes\n\nimport Header from './components/header'; //Creamos el cliente de apollo\n\nvar client = new ApolloClient({\n  //url donde el cliente se conectara\n  uri: \"http://localhost:4000/graphql\",\n  //en caso de que haya errores lo imprime en consola\n  onError: function onError(_ref) {\n    var networkErro = _ref.networkErro,\n        graphQlErrors = _ref.graphQlErrors;\n    console.log('graphQLErrors', graphQlErrors);\n    console.log('networkError', graphQlErrors);\n  }\n});\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return (//Aqui usamo apolloprovider le pasamos el cliente que hemos creado y dentro están nuestros componentes\n        React.createElement(ApolloProvider, {\n          client: client,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        }, \"Hola\"))\n      );\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/jesuscordova/Desktop/curso-Graphql-Udemy/graphql-servidor/cliente/src/App.js"],"names":["React","Component","ApolloProvider","ApolloClient","Header","client","uri","onError","networkErro","graphQlErrors","console","log","App"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,cAAT,QAA8B,cAA9B;AACA,OAAOC,YAAP,MAAyB,cAAzB,C,CAEA;;AAEA,OAAOC,MAAP,MAAmB,qBAAnB,C,CAGA;;AACA,IAAMC,MAAM,GAAG,IAAIF,YAAJ,CAAiB;AAC9B;AACAG,EAAAA,GAAG,EAAE,+BAFyB;AAG9B;AACAC,EAAAA,OAAO,EAAE,uBAAiC;AAAA,QAA/BC,WAA+B,QAA/BA,WAA+B;AAAA,QAAlBC,aAAkB,QAAlBA,aAAkB;AACxCC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,aAA7B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,aAA5B;AAED;AAR6B,CAAjB,CAAf;;IAaMG,G;;;;;;;;;;;;;6BACK;AACP,aACE;AACA,4BAAC,cAAD;AAAgB,UAAA,MAAM,EAAEP,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF;AAFF;AAMD;;;;EAReJ,S;;AAWlB,eAAeW,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport { ApolloProvider} from 'react-apollo';\nimport ApolloClient from 'apollo-boost';\n\n//Importar componentes\n\nimport Header from './components/header'\n\n\n//Creamos el cliente de apollo\nconst client = new ApolloClient({\n  //url donde el cliente se conectara\n  uri: \"http://localhost:4000/graphql\",\n  //en caso de que haya errores lo imprime en consola\n  onError: ({networkErro, graphQlErrors})=> {\n    console.log('graphQLErrors', graphQlErrors);\n    console.log('networkError', graphQlErrors);\n\n  } \n})\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      //Aqui usamo apolloprovider le pasamos el cliente que hemos creado y dentro están nuestros componentes\n      <ApolloProvider client={client}>\n        <h1>Hola</h1>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}