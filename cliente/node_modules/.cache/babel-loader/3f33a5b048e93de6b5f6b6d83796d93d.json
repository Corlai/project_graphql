{"ast":null,"code":"import _classCallCheck from \"/Users/jesuscordova/Desktop/curso-Graphql-Udemy/graphql-servidor/cliente/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jesuscordova/Desktop/curso-Graphql-Udemy/graphql-servidor/cliente/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jesuscordova/Desktop/curso-Graphql-Udemy/graphql-servidor/cliente/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jesuscordova/Desktop/curso-Graphql-Udemy/graphql-servidor/cliente/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jesuscordova/Desktop/curso-Graphql-Udemy/graphql-servidor/cliente/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jesuscordova/Desktop/curso-Graphql-Udemy/graphql-servidor/cliente/src/App.js\";\nimport React, { Component, Fragment } from 'react';\nimport { ApolloProvider } from 'react-apollo';\nimport ApolloClient, { InMemoryCache } from 'apollo-boost'; //Esto se puede crear como un componente o en otra carpeta\n// import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport { BrowserRouter } from 'react-router-dom';\nimport { Router, Route, Switch } from 'react-router-dom'; //Importar componentes\n\nimport Header from './components/header';\nimport Clientes from './components/Clientes';\nimport EditarCliente from './components/editarCliente';\nimport NuevoCliente from './components/nuevoCliente'; //Creamos el cliente de apollo\n\nvar client = new ApolloClient({\n  //url donde el cliente se conectara\n  uri: 'http://localhost:4000/graphql',\n  // Para deshabilitar typenames\n  cache: new InMemoryCache({\n    addTypename: false\n  }),\n  //en caso de que haya errores lo imprime en consola\n  onError: function onError(_ref) {\n    var networkErro = _ref.networkErro,\n        graphQlErrors = _ref.graphQlErrors;\n    console.log('graphQLErrors', graphQlErrors);\n    console.log('networkError', graphQlErrors);\n  }\n});\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return (//Aqui usamo apolloprovider le pasamos el cliente que hemos creado y dentro están nuestros componentes\n        React.createElement(ApolloProvider, {\n          client: client,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, React.createElement(Router, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        }, React.createElement(Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        }, React.createElement(Header, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }, React.createElement(Switch, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, React.createElement(Route, {\n          exact: true,\n          path: \"/\",\n          component: Clientes,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }), React.createElement(Route, {\n          exact: true,\n          path: \"/cliente/editar/:id\",\n          component: EditarCliente,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }), React.createElement(Route, {\n          exact: true,\n          path: \"/cliente/nuevo\",\n          component: NuevoCliente,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }))))))\n      );\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/jesuscordova/Desktop/curso-Graphql-Udemy/graphql-servidor/cliente/src/App.js"],"names":["React","Component","Fragment","ApolloProvider","ApolloClient","InMemoryCache","BrowserRouter","Router","Route","Switch","Header","Clientes","EditarCliente","NuevoCliente","client","uri","cache","addTypename","onError","networkErro","graphQlErrors","console","log","App"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,YAAP,IAAuBC,aAAvB,QAA4C,cAA5C,C,CACA;AACA;;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,MAAxB,QAAsC,kBAAtC,C,CAEA;;AAEA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,YAAP,MAAyB,2BAAzB,C,CAEA;;AACA,IAAMC,MAAM,GAAG,IAAIV,YAAJ,CAAiB;AAC/B;AACAW,EAAAA,GAAG,EAAE,+BAF0B;AAG/B;AACAC,EAAAA,KAAK,EAAE,IAAIX,aAAJ,CAAkB;AACxBY,IAAAA,WAAW,EAAE;AADW,GAAlB,CAJwB;AAO/B;AACAC,EAAAA,OAAO,EAAE,uBAAoC;AAAA,QAAjCC,WAAiC,QAAjCA,WAAiC;AAAA,QAApBC,aAAoB,QAApBA,aAAoB;AAC5CC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,aAA7B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,aAA5B;AACA;AAX8B,CAAjB,CAAf;;IAcMG,G;;;;;;;;;;;;;6BACI;AACR,aACC;AACA,4BAAC,cAAD;AAAgB,UAAA,MAAM,EAAET,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEC,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACC,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADD,EAEC;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACC,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEC,oBAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAa,UAAA,IAAI,EAAC,GAAlB;AAAsB,UAAA,SAAS,EAAEH,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFD,EAGC,oBAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAa,UAAA,IAAI,EAAC,qBAAlB;AAAwC,UAAA,SAAS,EAAEC,aAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHD,EAIC,oBAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAa,UAAA,IAAI,EAAC,gBAAlB;AAAmC,UAAA,SAAS,EAAEC,YAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAJD,CADD,CAFD,CAFD,CAFD;AAFD;AAoBA;;;;EAtBgBZ,S;;AAyBlB,eAAesB,GAAf","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { ApolloProvider } from 'react-apollo';\nimport ApolloClient, { InMemoryCache } from 'apollo-boost';\n//Esto se puede crear como un componente o en otra carpeta\n// import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Router, Route, Switch } from 'react-router-dom';\n\n//Importar componentes\n\nimport Header from './components/header';\nimport Clientes from './components/Clientes';\nimport EditarCliente from './components/editarCliente';\nimport NuevoCliente from './components/nuevoCliente';\n\n//Creamos el cliente de apollo\nconst client = new ApolloClient({\n\t//url donde el cliente se conectara\n\turi: 'http://localhost:4000/graphql',\n\t// Para deshabilitar typenames\n\tcache: new InMemoryCache({\n\t\taddTypename: false\n\t}),\n\t//en caso de que haya errores lo imprime en consola\n\tonError: ({ networkErro, graphQlErrors }) => {\n\t\tconsole.log('graphQLErrors', graphQlErrors);\n\t\tconsole.log('networkError', graphQlErrors);\n\t}\n});\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t//Aqui usamo apolloprovider le pasamos el cliente que hemos creado y dentro están nuestros componentes\n\t\t\t<ApolloProvider client={client}>\n\t\t\t\t{/* Todo lo que son enlaces tienen que estar dentro de Router para poder redirigir */}\n\t\t\t\t<Router>\n\t\t\t\t\t{/* Router solo tiene que tener un hijo por eso lo metemos dentro de Fragment */}\n\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t<Header />\n\t\t\t\t\t\t<div className=\"container\">\n\t\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t\t{/* Rutas según vamos */}\n\t\t\t\t\t\t\t\t<Route exact path=\"/\" component={Clientes} />\n\t\t\t\t\t\t\t\t<Route exact path=\"/cliente/editar/:id\" component={EditarCliente} />\n\t\t\t\t\t\t\t\t<Route exact path=\"/cliente/nuevo\" component={NuevoCliente} />\n\t\t\t\t\t\t\t</Switch>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Fragment>\n\t\t\t\t</Router>\n\t\t\t</ApolloProvider>\n\t\t);\n\t}\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}